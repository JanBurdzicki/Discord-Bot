import discord
from datetime import datetime, timedelta
from sqlalchemy.future import select
from db.session import AsyncSessionLocal
from db.models import UserToken
from services.calendar_service import CalendarService

async def list_events_command(interaction: discord.Interaction, days: int = 7):
    user_id = interaction.user.id
    now = datetime.utcnow()
    time_min = now
    time_max = now + timedelta(days=days)

    async with AsyncSessionLocal() as session:
        # Get user's calendar token
        result = await session.execute(select(UserToken).where(UserToken.discord_id == user_id))
        token = result.scalar_one_or_none()

        if not token:
            embed = discord.Embed(title="Error", description="You must link your Google Calendar first. Use `/link_calendar`.", color=discord.Color.red())
            await interaction.response.send_message(embed=embed, ephemeral=True)
            return

        try:
            # Create CalendarService with user's token
            calendar_service = CalendarService(token.token_data)
            events = calendar_service.list_events(time_min=time_min, time_max=time_max)

            if not events:
                embed = discord.Embed(title="No Events", description=f"No events found in the next {days} days.", color=discord.Color.orange())
            else:
                lines = [f"{e.event_id}: {e.title} ({e.start_time} - {e.end_time})" for e in events]
                embed = discord.Embed(title="Upcoming Events", description="\n".join(lines), color=discord.Color.blue())
        except Exception as e:
            embed = discord.Embed(title="Error", description=str(e), color=discord.Color.red())

        await interaction.response.send_message(embed=embed, ephemeral=True)

async def add_event_command(interaction: discord.Interaction, title: str, start: str, end: str):
    user_id = interaction.user.id

    async with AsyncSessionLocal() as session:
        # Get user's calendar token
        result = await session.execute(select(UserToken).where(UserToken.discord_id == user_id))
        token = result.scalar_one_or_none()

        if not token:
            embed = discord.Embed(title="Error", description="You must link your Google Calendar first. Use `/link_calendar`.", color=discord.Color.red())
            await interaction.response.send_message(embed=embed, ephemeral=True)
            return

        try:
            start_dt = datetime.fromisoformat(start)
            end_dt = datetime.fromisoformat(end)

            # Create CalendarService with user's token
            calendar_service = CalendarService(token.token_data)

            # Import CalendarEvent here to avoid circular imports
            from services.calendar_service import CalendarEvent

            # Create a CalendarEvent object
            event = CalendarEvent(
                event_id="",  # Will be generated by the service
                title=title,
                start_time=start_dt,
                end_time=end_dt
            )

            event_id = calendar_service.add_event(event)
            embed = discord.Embed(title="Success", description=f"Event '{title}' added with ID: {event_id}", color=discord.Color.green())
        except Exception as e:
            embed = discord.Embed(title="Error", description=str(e), color=discord.Color.red())

        await interaction.response.send_message(embed=embed, ephemeral=True)

async def remove_event_command(interaction: discord.Interaction, event_id: str):
    user_id = interaction.user.id

    async with AsyncSessionLocal() as session:
        # Get user's calendar token
        result = await session.execute(select(UserToken).where(UserToken.discord_id == user_id))
        token = result.scalar_one_or_none()

        if not token:
            embed = discord.Embed(title="Error", description="You must link your Google Calendar first. Use `/link_calendar`.", color=discord.Color.red())
            await interaction.response.send_message(embed=embed, ephemeral=True)
            return

        try:
            # Create CalendarService with user's token
            calendar_service = CalendarService(token.token_data)
            success = calendar_service.remove_event(event_id)

            if success:
                embed = discord.Embed(title="Success", description=f"Event {event_id} removed.", color=discord.Color.green())
            else:
                embed = discord.Embed(title="Failed", description=f"Event {event_id} not found.", color=discord.Color.red())
        except Exception as e:
            embed = discord.Embed(title="Error", description=str(e), color=discord.Color.red())

        await interaction.response.send_message(embed=embed, ephemeral=True)

async def update_event_command(interaction: discord.Interaction, event_id: str, title: str, start: str, end: str):
    user_id = interaction.user.id

    async with AsyncSessionLocal() as session:
        # Get user's calendar token
        result = await session.execute(select(UserToken).where(UserToken.discord_id == user_id))
        token = result.scalar_one_or_none()

        if not token:
            embed = discord.Embed(title="Error", description="You must link your Google Calendar first. Use `/link_calendar`.", color=discord.Color.red())
            await interaction.response.send_message(embed=embed, ephemeral=True)
            return

        try:
            start_dt = datetime.fromisoformat(start)
            end_dt = datetime.fromisoformat(end)

            # Create CalendarService with user's token
            calendar_service = CalendarService(token.token_data)

            # Import CalendarEvent here to avoid circular imports
            from services.calendar_service import CalendarEvent

            # Create a CalendarEvent object with the updated information
            event = CalendarEvent(
                event_id=event_id,
                title=title,
                start_time=start_dt,
                end_time=end_dt
            )

            success = calendar_service.update_event(event)
            if success:
                embed = discord.Embed(title="Success", description=f"Event {event_id} updated.", color=discord.Color.green())
            else:
                embed = discord.Embed(title="Failed", description=f"Event {event_id} not found.", color=discord.Color.red())
        except Exception as e:
            embed = discord.Embed(title="Error", description=str(e), color=discord.Color.red())

        await interaction.response.send_message(embed=embed, ephemeral=True)
